# Network #####################################################
networks:
  # Run make net-shared to create the shared network first
  shared:
    external: true
  internal:
    driver: bridge
  envoy:
    driver: bridge

# Volumes #####################################################
volumes:
  kafka_data:
    driver: local
  nats_data:
    driver: local
  postgres_data:
    driver: local
  mysql_data:
    driver: local
  redis_data:
    driver: local
  mongo_data:
    driver: local

services:
  # Redis #####################################################
  redis:
    restart: always
    container_name: redis
    build:
      context: ./redis
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf
      - ./redis/users.acl:/etc/redis/users.acl
    environment:
      - REDIS_USERNAME=${REDIS_USERNAME}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server /etc/redis/redis.conf
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - internal
      - shared

  # MySQL ###############################################
  mysql:
    restart: always
    container_name: mysql
    build:
      context: ./database/mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${MYSQL_TIMEZONE}
    volumes:
      - mysql_data:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - internal
      - shared

  # PostgreSQL ###########################################
  postgres:
    restart: always
    container_name: postgres
    build:
      context: ./database/postgres
      args:
        - POSTGRES_VERSION=${POSTGRES_VERSION}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - internal
      - shared

  # MongoDB ###################################################
  mongo:
    container_name: mongo
    restart: always
    build:
      context: ./database/mongo
    ports:
      - "${MONGODB_PORT}:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - mongo_data:/data/db
    networks:
      - internal
      - shared

  # Kafka ####################################################
  kafka:
    image: apache/kafka:latest
    restart: unless-stopped
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 0
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 0@kafka:29093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      CLUSTER_ID: HsDBs9l6UUmQq7Y5E6bNlw
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - internal
      - shared
    volumes:
      - kafka_data:/var/lib/kafka/data

  # Kafka-ui ###########################################
  kafka-ui:
    image: provectuslabs/kafka-ui:${KAFKA_UI_VERSION:-latest}
    restart: unless-stopped
    container_name: kafka-ui
    ports:
      - "${KAFKA_UI_PORT}:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=Local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - DYNAMIC_CONFIG_ENABLED=true
      - KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED=true
      - KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED=true
      - KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME=connect
      - KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS=http://kafka-connect:8083
    networks:
      - internal
      - shared
    depends_on:
      - kafka

  # Debezium ################################################
  connect:
    image: quay.io/debezium/connect:${DEBEZIUM_VERSION}
    container_name: kafka-connect
    restart: unless-stopped
    ports:
      - 8083:8083
    depends_on:
      - kafka
    environment:
      - GROUP_ID=1
      - BOOTSTRAP_SERVERS=kafka:29092
      - CONFIG_STORAGE_TOPIC=connect_local_configs
      - OFFSET_STORAGE_TOPIC=connect_local_offsets
      - STATUS_STORAGE_TOPIC=connect_local_status
      - KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - KEY_CONVERTER_SCHEMAS_ENABLE=true
      - VALUE_CONVERTER_SCHEMAS_ENABLE=true
      - OFFSET_FLUSH_INTERVAL_MS=10000
      - CONNECT_REST_ADVERTISED_HOST_NAME=connect
      - CONNECT_REST_PORT=8083
    networks:
      - internal
      - shared

  # NATS ####################################################
  nats:
    build:
      context: ./nats
    container_name: nats
    ports:
      - "4222:4222" # Client connections
      - "8222:8222" # HTTP monitoring
      - "6222:6222" # Clustering
    volumes:
      - nats_data:/data
    restart: unless-stopped
    networks:
      - internal
      - shared

  # Envoy ###################################################
  envoy:
    image: envoyproxy/envoy:v1.35.3
    container_name: envoy
    volumes:
      - ./envoy/envoy.yaml:/etc/envoy/envoy.yaml:ro
    command: ["-c", "/etc/envoy/envoy.yaml"]
    ports:
      - "82:82"
      - "9901:9901"
    restart: unless-stopped
    networks:
      - envoy
      - internal
      - shared
