#!/bin/bash

# Git push with safety checks and automation
function gitpush() {
    local commit_message="$1"
    local green_arrow="\033[32m➤\033[0m"
    # local success_icon="🎉"
    local success_icon="\033[32m✔\033[0m"
    # local error_icon="❌"
    local error_icon="\033[31m✘\033[0m"

    # Check if commit message is provided
    if [[ -z "$commit_message" ]]; then
        echo "${error_icon} Required commit message"
        return 1
    fi

    # Check if we're in a git repository
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        echo "${error_icon} Invalid repository"
        return 1
    fi

    # Get current branch name
    local current_branch=$(git branch --show-current)

    # List of protected branches that need confirmation
    local protected_branches=("main" "master" "staging" "stg")
    local is_protected=false

    for branch in "${protected_branches[@]}"; do
        if [[ "$current_branch" == "$branch" ]]; then
            is_protected=true
            break
        fi
    done

    # Show changes summary before adding (non-interactive)
    echo "${green_arrow} Summary changes"
    git --no-pager diff --stat --color=always
    echo ""

    # Auto git add all
    echo "${green_arrow} Adding all changes"
    git add .

    # Check if there are changes to commit
    if git diff --cached --quiet; then
        echo "${green_arrow} No changes to commit"
        return 0
    fi

    # Check for protected branch and ask for confirmation before commit
    if [[ "$is_protected" == true ]]; then
        echo -n "${green_arrow} Push to \033[32m$current_branch\033[0m branch? (y/n): "
        # echo -n "${green_arrow} Push to branch \033[1;31m$current_branch\033[0m? (y/n): "
        read confirm
        if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
            echo "${error_icon} Cancelled"
            git reset
            return 0
        fi
        echo ""
    fi

    # Commit with message
    echo "${green_arrow} Committing changes"
    if ! git commit -m "$commit_message"; then
        echo "${error_icon} Failed to commit"
        return 1
    fi
    echo ""

    # Fetch latest changes to check for conflicts
    echo "${green_arrow} Fetching from origin"
    git fetch origin
    echo ""

    # Check for merge conflicts before pushing
    if git rev-parse --verify "origin/$current_branch" > /dev/null 2>&1; then
        # Check if we need to merge
        local behind_count=$(git rev-list --count HEAD..origin/$current_branch)
        if [[ $behind_count -gt 0 ]]; then
            echo "${green_arrow} Pull and merge before pushing"
            if ! git pull origin "$current_branch"; then
                echo ""
                echo "${error_icon} Conflicts detected!"
                return 1
            fi
            echo ""
        fi
    fi

    # Push to origin
    echo "${green_arrow} Pushing to \033[32morigin/$current_branch\033[0m"
    if git push origin "$current_branch"; then
        echo ""
        echo "${success_icon} Pushed to \033[32morigin/$current_branch\033[0m"
    else
        echo "${error_icon} Failed to push"
        return 1
    fi
    echo ""
}
