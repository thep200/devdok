# Utility functions

# Fetch and display the latest git tags
# Usage: gittag [pattern]
function gittag() {
    git fetch --tags
    git tag --sort=-creatordate | grep "$1" | head -n 5
}

# Listing branch name of git repository
# Usage: gitbranch
function gitbranch() {
    max_length=$(git for-each-ref --sort=-committerdate refs/heads/ --format='%(refname:short)' | awk '{ print length, $0 }' | sort -nr | head -1 | awk '{ print $1 }')
    ((max_length = max_length > 25 ? max_length : 25))
    printf "%-${max_length}s-+-%s\n" "$(printf '%*s' $max_length | tr ' ' '-')" "-------------------"
    printf "%-${max_length}s | %s\n" "Branch Name" "Last Commit"
    printf "%-${max_length}s-+-%s\n" "$(printf '%*s' $max_length | tr ' ' '-')" "-------------------"
    git for-each-ref --sort=-committerdate refs/heads/ --format='%(refname:short) - %(committerdate:relative)' | head -n 10 | while read -r line; do
        branch_name=$(echo "$line" | awk -F' - ' '{print $1}')
        commit_date=$(echo "$line" | awk -F' - ' '{print $2}')
        printf "%-${max_length}s | %s\n" "$branch_name" "$commit_date"
    done
    printf "%-${max_length}s-+-%s\n" "$(printf '%*s' $max_length | tr ' ' '-')" "-------------------"
}

# Show file that match the extension in the current or specified directory
# Usage: showfile extension [path]
# Example: showfile php
function showfile() {
    local ext=$1
    local directory=${2:-.}

    if [[ -z "$ext" ]]; then
        echo "|-----------------------------------------------------|"
        echo "|Usage                 | showfile extension [path]    |"
        echo "|Ex Show current path  | showfile php                 |"
        echo "|Ex Show specific path | showfile php /path           |"
        echo "|-----------------------------------------------------|"
        return 1
    fi

    if [[ ! -d "$directory" ]]; then
        echo "Error: Directory '$directory' does not exist"
        return 1
    fi

    local count=$(find "$directory" -name "*.$ext" -type f | wc -l | tr -d ' ')
    if [[ $count -eq 0 ]]; then
        echo "No *.$ext files found in $directory"
        return 0
    fi

    find "$directory" -name "*.$ext" -type f -exec du -k {} + | \
    awk '{total+=$1} END{
        printf "|---------------------\n"
        printf "|Extension | '"$ext   \n"'"
        printf "|Count     | '"$count \n"'"
        printf "|Size (GB) | %.5f     \n", total/1024/1024
        printf "|---------------------\n"
    }'
}

# Git push with safety checks and automation
function gitpush() {
    local commit_message="$1"

    # Check if commit message is provided
    if [[ -z "$commit_message" ]]; then
        echo "Error: Commit message is required"
        echo "Usage: gitpush \"your commit message\""
        return 1
    fi

    # Check if we're in a git repository
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        echo "Error: Not in a git repository"
        return 1
    fi

    # Get current branch name
    local current_branch=$(git branch --show-current)
    echo "Current branch: $current_branch"

    # List of protected branches that need confirmation
    local protected_branches=("main" "master" "develop" "production" "prod" "staging")
    local is_protected=false

    for branch in "${protected_branches[@]}"; do
        if [[ "$current_branch" == "$branch" ]]; then
            is_protected=true
            break
        fi
    done

    # Auto git add all
    echo "Adding all changes..."
    git add .

    # Check if there are changes to commit
    if git diff --cached --quiet; then
        echo "No changes to commit"
        return 0
    fi

    # Show git diff with origin (limited output to avoid pager)
    echo "Showing diff with origin/$current_branch (first 20 lines):"
    echo "========================================"
    if git rev-parse --verify "origin/$current_branch" > /dev/null 2>&1; then
        git --no-pager diff "origin/$current_branch" | head -20
        local total_lines=$(git diff "origin/$current_branch" | wc -l)
        if [[ $total_lines -gt 20 ]]; then
            echo "... (showing first 20 lines of $total_lines total lines)"
            read -p "Show full diff? (y/N): " show_full
            if [[ "$show_full" =~ ^[Yy]$ ]]; then
                git --no-pager diff "origin/$current_branch"
            fi
        fi
    else
        echo "No origin/$current_branch found. Showing staged changes:"
        git --no-pager diff --cached | head -20
        
        local total_lines=$(git diff --cached | wc -l)
        if [[ $total_lines -gt 20 ]]; then
            echo "... (showing first 20 lines of $total_lines total lines)"
        fi
    fi
    echo "========================================"

    # Commit with message
    echo "Committing changes..."
    if ! git commit -m "$commit_message"; then
        echo "Error: Failed to commit changes"
        return 1
    fi

    # Check for protected branch and ask for confirmation
    if [[ "$is_protected" == true ]]; then
        echo "WARNING: You are about to push to protected branch '$current_branch'"
        read -p "Are you sure you want to continue? (y/N): " confirm
        if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
            echo "Push cancelled"
            return 0
        fi
    fi

    # Fetch latest changes to check for conflicts
    echo "Fetching latest changes..."
    git fetch origin

    # Check for merge conflicts before pushing
    if git rev-parse --verify "origin/$current_branch" > /dev/null 2>&1; then
        # Check if we need to merge
        local behind_count=$(git rev-list --count HEAD..origin/$current_branch)
        if [[ $behind_count -gt 0 ]]; then
            echo "Your branch is behind origin/$current_branch by $behind_count commits"
            echo "Attempting to pull and merge..."

            if ! git pull origin "$current_branch"; then
                echo "ERROR: Merge conflicts detected!"
                echo "Please resolve conflicts manually and try again"
                echo "Run 'git status' to see conflicted files"
                return 1
            fi
        fi
    fi

    # Push to origin
    echo "Pushing to origin/$current_branch..."
    # if git push origin "$current_branch"; then
    #     echo "Successfully pushed to origin/$current_branch"
    # else
    #     echo "ERROR: Failed to push. There might be conflicts or network issues"
    #     return 1
    # fi
}
